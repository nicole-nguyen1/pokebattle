/* tslint:disable */
/* eslint-disable */
/**
 * @org/source
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PokemonMove } from './PokemonMove';
import {
    PokemonMoveFromJSON,
    PokemonMoveFromJSONTyped,
    PokemonMoveToJSON,
    PokemonMoveToJSONTyped,
} from './PokemonMove';
import type { PokemonStat } from './PokemonStat';
import {
    PokemonStatFromJSON,
    PokemonStatFromJSONTyped,
    PokemonStatToJSON,
    PokemonStatToJSONTyped,
} from './PokemonStat';
import type { PokemonAbility } from './PokemonAbility';
import {
    PokemonAbilityFromJSON,
    PokemonAbilityFromJSONTyped,
    PokemonAbilityToJSON,
    PokemonAbilityToJSONTyped,
} from './PokemonAbility';
import type { VersionGameIndex } from './VersionGameIndex';
import {
    VersionGameIndexFromJSON,
    VersionGameIndexFromJSONTyped,
    VersionGameIndexToJSON,
    VersionGameIndexToJSONTyped,
} from './VersionGameIndex';
import type { PokemonHeldItem } from './PokemonHeldItem';
import {
    PokemonHeldItemFromJSON,
    PokemonHeldItemFromJSONTyped,
    PokemonHeldItemToJSON,
    PokemonHeldItemToJSONTyped,
} from './PokemonHeldItem';
import type { PokemonType } from './PokemonType';
import {
    PokemonTypeFromJSON,
    PokemonTypeFromJSONTyped,
    PokemonTypeToJSON,
    PokemonTypeToJSONTyped,
} from './PokemonType';
import type { NamedAPIResource } from './NamedAPIResource';
import {
    NamedAPIResourceFromJSON,
    NamedAPIResourceFromJSONTyped,
    NamedAPIResourceToJSON,
    NamedAPIResourceToJSONTyped,
} from './NamedAPIResource';
import type { PokemonPastType } from './PokemonPastType';
import {
    PokemonPastTypeFromJSON,
    PokemonPastTypeFromJSONTyped,
    PokemonPastTypeToJSON,
    PokemonPastTypeToJSONTyped,
} from './PokemonPastType';
import type { PokemonSprites } from './PokemonSprites';
import {
    PokemonSpritesFromJSON,
    PokemonSpritesFromJSONTyped,
    PokemonSpritesToJSON,
    PokemonSpritesToJSONTyped,
} from './PokemonSprites';

/**
 * ## Pokemon
 * Pokémon are the creatures that inhabit the world of the Pokémon games.
 * They can be caught using Pokéballs and trained by battling with other Pokémon.
 * Each Pokémon belongs to a specific species but may take on a variant
 * which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings.
 * - See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
 * @export
 * @interface Pokemon
 */
export interface Pokemon {
    /**
     * The identifier for this resource
     * @type {number}
     * @memberof Pokemon
     */
    id: number;
    /**
     * The name for this resource
     * @type {string}
     * @memberof Pokemon
     */
    name: string;
    /**
     * The base experience gained for defeating this Pokémon
     * @type {number}
     * @memberof Pokemon
     */
    base_experience: number;
    /**
     * The height of this Pokémon in decimetres
     * @type {number}
     * @memberof Pokemon
     */
    height: number;
    /**
     * Set for exactly one Pokémon used as the default for each species
     * @type {boolean}
     * @memberof Pokemon
     */
    is_default: boolean;
    /**
     * Order for sorting. Almost national order, except families are grouped together
     * @type {number}
     * @memberof Pokemon
     */
    order: number;
    /**
     * The weight of this Pokémon in hectograms
     * @type {number}
     * @memberof Pokemon
     */
    weight: number;
    /**
     * A list of abilities this Pokémon could potentially have
     * @type {Array<PokemonAbility>}
     * @memberof Pokemon
     */
    abilities: Array<PokemonAbility>;
    /**
     * A list of forms this Pokémon can take on
     * @type {Array<NamedAPIResource>}
     * @memberof Pokemon
     */
    forms: Array<NamedAPIResource>;
    /**
     * A list of game indices relevent to Pokémon item by generation
     * @type {Array<VersionGameIndex>}
     * @memberof Pokemon
     */
    game_indices: Array<VersionGameIndex>;
    /**
     * A list of items this Pokémon may be holding when encountered
     * @type {Array<PokemonHeldItem>}
     * @memberof Pokemon
     */
    held_items: Array<PokemonHeldItem>;
    /**
     * A link to a list of location areas, as well as encounter details pertaining to specific versions
     * @type {string}
     * @memberof Pokemon
     */
    location_area_encounters: string;
    /**
     * A list of moves along with learn methods and level details pertaining to specific version groups
     * @type {Array<PokemonMove>}
     * @memberof Pokemon
     */
    moves: Array<PokemonMove>;
    /**
     * 
     * @type {PokemonSprites}
     * @memberof Pokemon
     */
    sprites: PokemonSprites;
    /**
     * 
     * @type {NamedAPIResource}
     * @memberof Pokemon
     */
    species: NamedAPIResource;
    /**
     * A list of base stat values for this Pokémon
     * @type {Array<PokemonStat>}
     * @memberof Pokemon
     */
    stats: Array<PokemonStat>;
    /**
     * A list of details showing types this Pokémon has
     * @type {Array<PokemonType>}
     * @memberof Pokemon
     */
    types: Array<PokemonType>;
    /**
     * Data describing a Pokemon's types in a previous generation.
     * @type {Array<PokemonPastType>}
     * @memberof Pokemon
     */
    past_types: Array<PokemonPastType>;
}

/**
 * Check if a given object implements the Pokemon interface.
 */
export function instanceOfPokemon(value: object): value is Pokemon {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('base_experience' in value) || value['base_experience'] === undefined) return false;
    if (!('height' in value) || value['height'] === undefined) return false;
    if (!('is_default' in value) || value['is_default'] === undefined) return false;
    if (!('order' in value) || value['order'] === undefined) return false;
    if (!('weight' in value) || value['weight'] === undefined) return false;
    if (!('abilities' in value) || value['abilities'] === undefined) return false;
    if (!('forms' in value) || value['forms'] === undefined) return false;
    if (!('game_indices' in value) || value['game_indices'] === undefined) return false;
    if (!('held_items' in value) || value['held_items'] === undefined) return false;
    if (!('location_area_encounters' in value) || value['location_area_encounters'] === undefined) return false;
    if (!('moves' in value) || value['moves'] === undefined) return false;
    if (!('sprites' in value) || value['sprites'] === undefined) return false;
    if (!('species' in value) || value['species'] === undefined) return false;
    if (!('stats' in value) || value['stats'] === undefined) return false;
    if (!('types' in value) || value['types'] === undefined) return false;
    if (!('past_types' in value) || value['past_types'] === undefined) return false;
    return true;
}

export function PokemonFromJSON(json: any): Pokemon {
    return PokemonFromJSONTyped(json, false);
}

export function PokemonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Pokemon {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'base_experience': json['base_experience'],
        'height': json['height'],
        'is_default': json['is_default'],
        'order': json['order'],
        'weight': json['weight'],
        'abilities': ((json['abilities'] as Array<any>).map(PokemonAbilityFromJSON)),
        'forms': ((json['forms'] as Array<any>).map(NamedAPIResourceFromJSON)),
        'game_indices': ((json['game_indices'] as Array<any>).map(VersionGameIndexFromJSON)),
        'held_items': ((json['held_items'] as Array<any>).map(PokemonHeldItemFromJSON)),
        'location_area_encounters': json['location_area_encounters'],
        'moves': ((json['moves'] as Array<any>).map(PokemonMoveFromJSON)),
        'sprites': PokemonSpritesFromJSON(json['sprites']),
        'species': NamedAPIResourceFromJSON(json['species']),
        'stats': ((json['stats'] as Array<any>).map(PokemonStatFromJSON)),
        'types': ((json['types'] as Array<any>).map(PokemonTypeFromJSON)),
        'past_types': ((json['past_types'] as Array<any>).map(PokemonPastTypeFromJSON)),
    };
}

export function PokemonToJSON(json: any): Pokemon {
    return PokemonToJSONTyped(json, false);
}

export function PokemonToJSONTyped(value?: Pokemon | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'base_experience': value['base_experience'],
        'height': value['height'],
        'is_default': value['is_default'],
        'order': value['order'],
        'weight': value['weight'],
        'abilities': ((value['abilities'] as Array<any>).map(PokemonAbilityToJSON)),
        'forms': ((value['forms'] as Array<any>).map(NamedAPIResourceToJSON)),
        'game_indices': ((value['game_indices'] as Array<any>).map(VersionGameIndexToJSON)),
        'held_items': ((value['held_items'] as Array<any>).map(PokemonHeldItemToJSON)),
        'location_area_encounters': value['location_area_encounters'],
        'moves': ((value['moves'] as Array<any>).map(PokemonMoveToJSON)),
        'sprites': PokemonSpritesToJSON(value['sprites']),
        'species': NamedAPIResourceToJSON(value['species']),
        'stats': ((value['stats'] as Array<any>).map(PokemonStatToJSON)),
        'types': ((value['types'] as Array<any>).map(PokemonTypeToJSON)),
        'past_types': ((value['past_types'] as Array<any>).map(PokemonPastTypeToJSON)),
    };
}

